add_custom_command(
  OUTPUT
    "@PLUGIN_DIRECTORY@/@VTK_FILE_PREFIX@.h"
    "@PLUGIN_DIRECTORY@/@VTK_FILE_PREFIX@.cxx"
    "@PLUGIN_DIRECTORY@/@PLUGIN_NAME@.xml"
  COMMAND
    "${ITKPlugins_EXECUTABLE_DIR}/GenerateParaView3Plugin"
    "${SimpleITK_SOURCE_DIR}/Code/BasicFilters/json/@PLUGIN_NAME@.json"
    "@PLUGIN_DIRECTORY@"
  DEPENDS
    GenerateParaView3Plugin
    ${SimpleITK_SOURCE_DIR}/Code/BasicFilters/json/@PLUGIN_NAME@.json
    "${ITKPlugins_SOURCE_DIR}/Generators/ParaView3/RunOneInput.h"
    "${ITKPlugins_SOURCE_DIR}/Generators/ParaView3/RunTwoInputs.h"
  WORKING_DIRECTORY "${ITKPlugins_BINARY_DIR}"
  VERBATIM
  )

# Fake out add_paraview_plugin by generating empty files for the .h, .cxx, and .xml
# files that define the plugin. These files need to exist prior to calling
# add_paraview_plugin, otherwise the proper plugin initializers won't be generated,
# and the plugin won't work
file( WRITE "@PLUGIN_DIRECTORY@/@VTK_FILE_PREFIX@.h" "" )
file( WRITE "@PLUGIN_DIRECTORY@/@VTK_FILE_PREFIX@.cxx" "" )
file( WRITE "@PLUGIN_DIRECTORY@/@PLUGIN_NAME@.xml" "" )

add_paraview_plugin( @PLUGIN_NAME@ "1.0"
  SERVER_MANAGER_XML "@PLUGIN_DIRECTORY@/@PLUGIN_NAME@.xml"
  SERVER_MANAGER_SOURCES
    "@PLUGIN_DIRECTORY@/@VTK_FILE_PREFIX@.cxx"
  GUI_RESOURCE_FILES "ITKPluginsGUI.xml"
  )

# Now remove the dummy files so that they can be generated properly by the
# source code generator
file( REMOVE
  "@PLUGIN_DIRECTORY@/@VTK_FILE_PREFIX@.h"
  "@PLUGIN_DIRECTORY@/@VTK_FILE_PREFIX@.cxx"
  "@PLUGIN_DIRECTORY@/@PLUGIN_NAME@.xml"
  )

add_dependencies( @PLUGIN_NAME@
  "@PLUGIN_DIRECTORY@/@VTK_FILE_PREFIX@.cxx"
  "${ITKPlugins_SOURCE_DIR}/Generators/ParaView3/RunOneInput.h"
  "${ITKPlugins_SOURCE_DIR}/Generators/ParaView3/RunTwoInputs.h"
  )

target_link_libraries( @PLUGIN_NAME@
  ${ITK_LIBRARIES}
  )
